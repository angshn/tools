#!"c:\Users\syang\miniconda3\python.exe"
# coding:utf-8
import re
import json
import sys
import argparse
import requests as req
import urllib
from urllib import parse
from urllib.parse import urlparse, parse_qs
import getpass
from PIL import Image
from io import BytesIO
from threading import Thread
import matplotlib.pyplot as plt
import cv2
import numpy as np
import regex
import os
import configparser


# 封装post请求
def post(url, headers={}, data={}):
    data = bytes(urllib.parse.urlencode(data), encoding="utf-8")
    request = urllib.request.Request(url, headers=headers, data=data)
    response = urllib.request.urlopen(request)
    return response


# 封装get请求
def get(url, headers={}):
    request = urllib.request.Request(url, headers=headers)
    response = urllib.request.urlopen(request)

    return response


class Netlogin:
    def __init__(self):
        """
        登陆服务
        0：校园网
        1：中国移动
        2：中国联通
        3：中国电信
        """
        self.services = {
            "0": "%e6%a0%a1%e5%9b%ad%e7%bd%91",
            "1": "%E4%B8%AD%E5%9B%BD%E7%A7%BB%E5%8A%A8",
            "2": "%e4%b8%ad%e5%9b%bd%e8%81%94%e9%80%9a",
            "3": "%e4%b8%ad%e5%9b%bd%e7%94%b5%e4%bf%a1",
        }
        self.url = "http://auth.ysu.edu.cn/eportal/InterFace.do?method="
        self.header = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17134",
            "Accept-Encoding": "identify",
        }
        self.isLogined = None
        self.alldata = None

    def tst_net(self):
        """
        测试网络是否认证
        :return: 是否已经认证
        """
        res = req.get("http://auth.ysu.edu.cn", headers=self.header)

        if res.url.find("success.jsp") > 0:
            cont = urlparse(res.url)
            params = parse_qs(cont.query)
            userIndex = params["userIndex"]
            # print(userIndex)
            userres = req.post(
                "http://auth.ysu.edu.cn/eportal/InterFace.do?method=getOnlineUserInfo",
                data={"userIndex": userIndex},
            )
            userres.encoding = "u8"
            userinfo = userres.json()
            self.isLogined = True
            return {
                "user": userinfo["userName"],
                "isp": userinfo["service"],
                "ip": userinfo["userIp"],
            }, True
        else:
            self.isLogined = False
        return None, self.isLogined

    def isCode(self):
        """
        检测是否需要输入验证码
        未开放
        :return:是否需要验证码
        """
        pass

        return False

    def login(self, user, pwd, type, code=""):
        """
        输入参数登入校园网，自动检测当前网络是否认证。
        :param user:登入id
        :param pwd:登入密码
        :param type:认证服务
        :param code:验证码
        :return:元祖第一项：是否认证状态；第二项：详细信息
        """
        if self.isLogined == None:
            self.tst_net()
        if self.isLogined == False:
            if user == "" or pwd == "":
                return (False, "用户名或密码为空")
            self.data = {
                "userId": user,
                "password": pwd,
                "service": self.services[str(type)],
                "operatorPwd": "",
                "operatorUserId": "",
                "validcode": code,
                "passwordEncrypt": "False",
            }
            res = get("http://auth.ysu.edu.cn", headers=self.header)
            queryString = re.findall(
                r"href='.*?\?(.*?)'", res.read().decode("utf-8"), re.S
            )
            self.data["queryString"] = queryString[0]

            res = post(self.url + "login", headers=self.header, data=self.data)
            login_json = json.loads(res.read().decode("utf-8"))
            self.userindex = login_json["userIndex"]
            # self.info = login_json
            self.info = login_json["message"]
            if login_json["result"] == "success":
                return (True, "认证成功")
            else:
                return (False, self.info)

        return (True, "已经在线")

    def get_alldata(self):
        """
        获取当前认证账号全部信息
        #！！！注意！！！#此操作会获得账号alldata['userId']姓名alldata['userName']以及密码alldata['password']
        :return:全部数据的字典格式
        """
        res = get(
            "http://auth.ysu.edu.cn/eportal/InterFace.do?method=getOnlineUserInfo",
            headers=self.header,
        )
        try:
            self.alldata = json.loads(res.read().decode("utf-8"))
        except json.decoder.JSONDecodeError as e:
            print("数据解析失败，请稍后重试。")

        return self.alldata

    def logout(self):
        """
        登出，操作内会自动获取特征码
        :return:元祖第一项：是否操作成功；第二项：详细信息
        """
        if self.alldata == None:
            self.get_alldata()

        res = get(self.url + "logout", headers=self.header)
        logout_json = json.loads(res.read().decode("utf-8"))
        # self.info = logout_json
        self.info = logout_json["message"]

        if logout_json["result"] == "success":
            return (True, "下线成功")
        else:
            return (False, self.info)


class Serv:
    rsa_password = None
    def __init__(self) -> None:
        pass

    def down(self):
        self.login()
        groups = self.get_online_list()

        self.down_all(groups)
        self._logout

    def show_verify(self, cont):
        image = Image.open(BytesIO(cont))
        self._show_verify(image)

    def _show_verify(self,img):

        width    = img.width  #获取图片宽度
        height   = img.height #获取图片高度
        
        gray_img = img.convert('L')  #图片转换为'L'模式  模式“L”为灰色图像，它的每个像素用8个bit表示，0表示黑，255表示白，其他数字表示不同的灰度
        
        char_lst = ' .:-=+*@%.'  #要替换的字符
        char_len = len(char_lst)  #替换字符的长度
        
        for y in range(0, height, 1):  #根据缩放长度 遍历高度
            for x in range(0, width, 1):  #根据缩放长度 遍历宽度
                choice =gray_img.getpixel((x, y)) * char_len // 255  #获取每个点的灰度  根据不同的灰度填写相应的 替换字符
                if choice==char_len:
                    choice=char_len-1
                sys.stdout.write(char_lst[choice])  #写入控制台
            sys.stdout.write('\n')
            sys.stdout.flush()
    
    def login(
        self,
    ):
        res = req.get("https://serv.ysu.edu.cn/selfservice")
        self.cookies = res.cookies
        verify_image_res = req.get(
            "https://serv.ysu.edu.cn/selfservice/common/web/verifycode.jsp",
            cookies=res.cookies,
        )

        thread = Thread(target=self.show_verify, args=[verify_image_res.content])
        thread.start()
        verify_code = input("input verify code.\n>")

        json_data = {
            "from": "rsa",
            "name": f"{args.user}",
            "password": self.rsa_password,
            "verify": verify_code,
        }
        data = parse.urlencode(json_data)
        login_res = req.post(
            "https://serv.ysu.edu.cn/selfservice/module/scgroup/web/login_judge.jsf",
            headers={"Content-Type": "application/x-www-form-urlencoded"},
            data=data,
            cookies=self.cookies,
        )

    def get_online_list(
        self,
    ):
        online_device_res = req.get(
            "https://serv.ysu.edu.cn/selfservice/module/webcontent/web/onlinedevice_list.jsf",
            cookies=self.cookies,
        )
        rules = "IP.:.(.*?)<"
        pattern = regex.compile(rules)
        return pattern.findall(online_device_res.text)

    def down_all(self, groups):
        for ip in groups:
            key = f"key={args.user}:{ip}"
            offline_res = req.post(
                "https://serv.ysu.edu.cn/selfservice/module/userself/web/userself_ajax.jsf?methodName=indexBean.kickUserBySelfForAjax",
                cookies=self.cookies,
                headers={
                    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8"
                },
                data=key,
            )
            print(f"{ip}：{offline_res.text}")

    def _logout(self):
        res = req.get(
            "https://serv.ysu.edu.cn/selfservice/module/webcontent/web/init.jsf?goto=module/scgroup/web/logout.jsp",
            cookies=self.cookies,
        )
        print(res.text.strip("\r\n\t "))


def argparser():
    conf = configparser.ConfigParser()
    conf.read("conf")
    Serv.rsa_password = conf.get("USER","rsa_password")
    parser = argparse.ArgumentParser(
        description="登陆服务： 0.校园网 1.中国移动 2.中国联通 3.中国电信\n格式：\n登入：./netlogin -l -u 202222xxxxx -p password -i 0\n注销: ./netlogin -q\n"
    )
    parser.add_argument("-l", "--login", dest="login", action="store_true")
    parser.add_argument(
        "-u",
        "--user",
        dest="user",
        type=str,
        help="username, like xxxx",
        default=conf.get("USER","username"),
    )
    parser.add_argument(
        "-p",
        "--password",
        dest="password",
        type=str,
        default=conf.get("USER","password"),
        help="password, your ysu account password.",
    )
    parser.add_argument(
        "-i",
        "--isp",
        dest="isp",
        type=int,
        help="Your ISP server name, default choice is 中国电信[3]",
        default=3,
        choices=[0, 1, 2, 3],
    )

    parser.add_argument(
        "-q", "--quit", dest="quit", action="store_true", help="Exit ysu ISP server."
    )
    parser.add_argument(
        "-t",
        "--test",
        dest="check",
        action="store_true",
        help="Check if the user is logged in.",
    )
    parser.add_argument("-d", "--down", dest="down", action="store_true")
    return parser.parse_args()


if __name__ == "__main__":
    loger = Netlogin()

    args = argparser()
    serv = Serv()
    if args.login:
        if not args.password:
            args.password = getpass.getpass(f"Password of user {args.user}>\n")
            # input("Input your password>\n")
        state, info = loger.login(user=args.user, pwd=args.password, type=args.isp)
        if not state:
            print("Login failed.")
        else:
            print("Login successfully.")

    if args.quit:
        state, info = loger.logout()
        if state:
            print(info)
        else:
            print("出现错误!")
            print(info)
        sys.exit(0)

    if args.check:
        info, error = loger.tst_net()
        if error:
            print(
                "Logged!\nCurrent user is {}.\nIP is {}.\nISP is {}".format(
                    info["user"], info["ip"], info["isp"]
                )
            )
        else:
            print("Not Authorized.")
    if args.down:
        serv.down()
